
# This compose file creates 3 containers. The app, the migrations and the database.
# The database runs first
# then the migrations run over the database
# finally the app runs when the migrations are successful
# Modify to your needs

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"  # Only expose port of the app, everything else within the Docker network
    environment:
      - PGHOST=${PGHOST}
      - PGUSER=${PGUSER}
      - PGPASSWORD=${PGPASSWORD}
      - PGDATABASE=${PGDATABASE}
      - PGSSLMODE=${PGSSLMODE}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_DURATION=${JWT_DURATION}
      - SERVER_HOST=${SERVER_HOST}
      - SERVER_PORT=${SERVER_PORT}
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    restart: unless-stopped

  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=${PGUSER}
      - POSTGRES_PASSWORD=${PGPASSWORD}
      - POSTGRES_DB=${PGDATABASE}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PGUSER} -d ${PGDATABASE}"]
      interval: 5s
      timeout: 5s
      retries: 12

  migrate:
    build:
      context: .
      dockerfile: Dockerfile.migrate
    environment:
      - PGHOST=${PGHOST}
      - PGUSER=${PGUSER}
      - PGPASSWORD=${PGPASSWORD}
      - PGDATABASE=${PGDATABASE}
      - PGSSLMODE=${PGSSLMODE}
    command: ["up"]
    depends_on:
      db:
        condition: service_healthy
    restart: "no"

volumes:
  postgres_data: